<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.panjy.servicemetricsplatform.mapper.mysql.WechatMessageMapper">
    <resultMap id="ConversationResultMap" type="org.panjy.servicemetricsplatform.entity.Conversation">
        <!-- Conversation 的唯一标识，按 wechatId 聚合 -->
        <id property="wechatId" column="wechatId"/>

        <!-- Conversation 的日期：映射为该会话的最早 chat_time -->
        <result property="date" column="firstChatTime"/>

        <!-- 映射 Message 列表 -->
        <collection property="messages" ofType="org.panjy.servicemetricsplatform.entity.Message">
            <result property="sender" column="sender"/>
            <result property="message" column="message"/>
            <result property="type" column="type"/>
            <result property="chatTime" column="chatTime"/>
        </collection>
    </resultMap>

<!-- 查询某时间段中发送信息的用户 wxid -->
    <select id="findMessageByContent"
            resultType="java.lang.String">
        SELECT DISTINCT friend_wechat_id
        FROM wechat_message w
        WHERE 1 = 1
        <if test="content != null and content != ''">
            AND w.content LIKE CONCAT('%', #{content}, '%')
        </if>
        <if test="begin != null">
            AND w.chat_time &gt;= #{begin}
        </if>
        <if test="end != null">
            AND w.chat_time &lt;= #{end}
        </if>
    </select>
<!-- 查询某天的活跃用户个数 -->
    <select id="findActiveUsers" resultType="java.lang.String">
        SELECT DISTINCT friend_wechat_id
        FROM wechat_message
        WHERE friend_nickname = sender
        AND chat_time &gt;= DATE_SUB(#{checkTime}, INTERVAL 3 DAY)
        AND chat_time &lt;= #{checkTime};
    </select>
<!-- 查询留存率 -->
    <select id="findUserServived" resultType="java.lang.String">
        SELECT w.friend_wechat_id AS wechat_id
        FROM wechat_message w
        WHERE DATE(w.chat_time) BETWEEN DATE(#{checkTime}) AND DATE_ADD(DATE(#{checkTime}), INTERVAL #{days} DAY)
          AND w.friend_nickname = w.sender
        GROUP BY w.friend_wechat_id
        HAVING COUNT(DISTINCT DATE(w.chat_time)) = #{days};
    </select>
    <select id="findInactiveUsers" resultType="java.lang.String">
        SELECT t.wechat_id
        FROM (
            SELECT w1.friend_wechat_id AS wechat_id
            FROM wechat_message w1
            WHERE w1.sender = w1.friend_nickname
            GROUP BY w1.friend_wechat_id
            HAVING MIN(w1.chat_time) BETWEEN #{startTime}
                AND DATE_ADD(#{startTime}, INTERVAL 1 DAY)
        ) t
        WHERE t.wechat_id NOT IN (
            SELECT u1.friend_wechat_id AS wechat_id
            FROM wechat_message u1
            WHERE u1.sender = u1.friend_nickname
                AND u1.chat_time &lt;= DATE_ADD(#{startTime}, INTERVAL 7 DAY)
            GROUP BY u1.friend_wechat_id
            HAVING MAX(u1.chat_time) >= DATE_ADD(#{startTime}, INTERVAL 5 DAY)
        )
    </select>
    <select id="findConversationsByDate" resultMap="ConversationResultMap">
        SELECT
        friend_wechat_id AS wechatId,
        content AS message,
        CASE
            WHEN sender = wechat_nickname THEN wechat_id
            ELSE friend_wechat_id
        END AS sender,
        message_type AS type,
        chat_time AS chatTime,
        MIN(chat_time) OVER (PARTITION BY friend_wechat_id) AS firstChatTime
        FROM wechat_message
        WHERE chat_time &gt;= #{begin} AND chat_time &lt; #{end}
        AND content NOT LIKE '%你通过群发助手%'
        AND content NOT LIKE '%你已添加了%'
        ORDER BY friend_wechat_id, chat_time ASC
    </select>

    <!-- 每个好友在指定 date 之后首次聊天起 1 小时内的消息 -->
    <select id="findFirstHourConversationsAfterDate" resultMap="ConversationResultMap">
        WITH FirstMsgTime AS (
            SELECT
                friend_wechat_id,
                MIN(chat_time) AS first_chat_time
            FROM wechat_message
            GROUP BY friend_wechat_id
            HAVING MIN(chat_time) >= #{date}
        ),
             FirstHourMsgs AS (
                 SELECT
                     wm.friend_wechat_id,
                     wm.content,
                     wm.sender,
                     wm.message_type,
                     wm.chat_time,
                     wm.wechat_nickname,
                     wm.wechat_id,
                     TIMESTAMPDIFF(
                             SECOND,
                             fmt.first_chat_time,
                             wm.chat_time
                     ) AS seconds_after_first_msg
                 FROM wechat_message wm
                          JOIN FirstMsgTime fmt
                               ON wm.friend_wechat_id = fmt.friend_wechat_id
             )
        SELECT
            friend_wechat_id AS wechatId,
            content AS message,
            CASE
                WHEN sender = wechat_nickname THEN wechat_id
                ELSE friend_wechat_id
                END AS sender,
            message_type AS type,
            fmt.first_chat_time AS chatTime
        FROM FirstHourMsgs
        WHERE seconds_after_first_msg BETWEEN 0 AND 3600
          AND content NOT LIKE '%你通过群发助手%'
          AND content NOT LIKE '%你已添加了%'
          AND content NOT LIKE '%添加到%'
        ORDER BY wechatId, chatTime;

    </select>


</mapper>
